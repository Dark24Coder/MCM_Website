import db from '../config/db.js';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import crypto from 'crypto';

const JWT_SECRET = process.env.JWT_SECRET || 'mcm_secret_key_2024';

// Stockage temporaire pour codes de validation et mots de passe temporaires
const validationCodes = new Map();
const temporaryPasswords = new Map();

// ======================
// INSCRIPTION (REGISTER)
// ======================
export const register = async (req, res) => {
    try {
        console.log('üì• Nouvelle demande d\'inscription re√ßue');
        console.log('üìã Donn√©es re√ßues:', req.body);
        
        const { nom, prenom, email, telephone, mot_de_passe, role, commission_id, service_id } = req.body;

        // Validation des champs obligatoires
        if (!nom || !prenom || !email || !telephone || !mot_de_passe || !role) {
            console.log('‚ùå Champs manquants');
            return res.status(400).json({ error: 'Tous les champs obligatoires doivent √™tre remplis' });
        }

        // Validation email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            console.log('‚ùå Format d\'email invalide:', email);
            return res.status(400).json({ error: 'Format d\'email invalide' });
        }

        // Validation mot de passe
        if (mot_de_passe.length < 8) {
            console.log('‚ùå Mot de passe trop court');
            return res.status(400).json({ error: 'Le mot de passe doit contenir au moins 8 caract√®res' });
        }

        // Validation du r√¥le
        const validRoles = ['admin', 'adminCom', 'superadmin'];
        if (!validRoles.includes(role)) {
            console.log('‚ùå R√¥le invalide:', role);
            return res.status(400).json({ error: 'R√¥le invalide' });
        }

        // Validation selon le r√¥le
        if (role === 'adminCom' && !commission_id) {
            return res.status(400).json({ error: 'La commission est requise pour un Admin de Commission' });
        }

        if (role === 'admin' && (!commission_id || !service_id)) {
            return res.status(400).json({ error: 'La commission et le service sont requis pour un Admin de Service' });
        }

        // V√©rifier si l'utilisateur existe d√©j√†
        const checkUser = 'SELECT * FROM users WHERE email = $1 OR telephone = $2';
        
        db.query(checkUser, [email, telephone], async (err, results) => {
            if (err) {
                console.error('‚ùå Erreur v√©rification utilisateur:', err);
                return res.status(500).json({ error: 'Erreur serveur lors de la v√©rification' });
            }

            if (results.rows.length > 0) {
                const existingUser = results.rows[0];
                if (existingUser.email === email) {
                    console.log('‚ùå Email d√©j√† utilis√©:', email);
                    return res.status(409).json({ error: 'Cet email est d√©j√† utilis√©' });
                }
                if (existingUser.telephone === telephone) {
                    console.log('‚ùå T√©l√©phone d√©j√† utilis√©:', telephone);
                    return res.status(409).json({ error: 'Ce num√©ro de t√©l√©phone est d√©j√† utilis√©' });
                }
            }

            try {
                // Hacher le mot de passe
                console.log('üîê Hashage du mot de passe...');
                const saltRounds = 12;
                const hashedPassword = await bcrypt.hash(mot_de_passe, saltRounds);

                const commissionIdInt = commission_id ? parseInt(commission_id, 10) : null;
                const serviceIdInt = service_id ? parseInt(service_id, 10) : null;

                // Construire la requ√™te selon le r√¥le
                let insertQuery;
                let values;

                if (role === 'superadmin') {
                    // SuperAdmin: pas de commission ni service
                    insertQuery = `
                        INSERT INTO users 
                        (nom, prenom, email, telephone, mot_de_passe, role, created_at, email_verified, is_active) 
                        VALUES ($1, $2, $3, $4, $5, $6, NOW(), FALSE, TRUE)
                        RETURNING id, nom, prenom, email, telephone, role
                    `;
                    values = [nom, prenom, email, telephone, hashedPassword, role];
                } else if (role === 'adminCom') {
                    // AdminCom: commission uniquement
                    insertQuery = `
                        INSERT INTO users 
                        (nom, prenom, email, telephone, mot_de_passe, role, commission_id, created_at, email_verified, is_active) 
                        VALUES ($1, $2, $3, $4, $5, $6, $7, NOW(), FALSE, TRUE)
                        RETURNING id, nom, prenom, email, telephone, role, commission_id
                    `;
                    values = [nom, prenom, email, telephone, hashedPassword, role, commissionIdInt];
                } else {
                    // Admin: commission et service
                    insertQuery = `
                        INSERT INTO users 
                        (nom, prenom, email, telephone, mot_de_passe, role, commission_id, service_id, created_at, email_verified, is_active) 
                        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW(), FALSE, TRUE)
                        RETURNING id, nom, prenom, email, telephone, role, commission_id, service_id
                    `;
                    values = [nom, prenom, email, telephone, hashedPassword, role, commissionIdInt, serviceIdInt];
                }

                console.log('üìù Ex√©cution de la requ√™te INSERT');
                
                db.query(insertQuery, values, (err, result) => {
                    if (err) {
                        console.error('‚ùå Erreur insertion utilisateur:', err);
                        return res.status(500).json({ error: 'Erreur lors de la cr√©ation du compte' });
                    }

                    const newUser = result.rows[0];
                    console.log(`‚úÖ Nouveau compte cr√©√©: ${email} - ${role} - ID: ${newUser.id}`);

                    res.status(201).json({
                        success: true,
                        message: 'Compte cr√©√© avec succ√®s',
                        user: newUser
                    });
                });
            } catch (hashError) {
                console.error('‚ùå Erreur hachage mot de passe:', hashError);
                return res.status(500).json({ error: 'Erreur lors du traitement du mot de passe' });
            }
        });
    } catch (error) {
        console.error('‚ùå Erreur g√©n√©rale inscription:', error);
        res.status(500).json({ error: 'Erreur serveur interne' });
    }
};

// ======================
// CONNEXION (LOGIN) - AVEC GESTION COMPTE SUPPRIM√â
// ======================
export const login = async (req, res) => {
    try {
        const { email, mot_de_passe } = req.body;

        console.log(`üì• Tentative de connexion pour: ${email}`);

        // Validation des champs
        if (!email || !mot_de_passe) {
            console.log('‚ùå Champs manquants pour la connexion');
            return res.status(400).json({ error: 'Email et mot de passe requis' });
        }

        // Validation format email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            console.log('‚ùå Format email invalide pour connexion');
            return res.status(400).json({ error: 'Format d\'email invalide' });
        }

        // Rechercher l'utilisateur dans la base de donn√©es
        const findUser = 'SELECT * FROM users WHERE email = $1';
        
        db.query(findUser, [email], async (err, results) => {
            if (err) {
                console.error('‚ùå Erreur base de donn√©es lors de la connexion:', err);
                return res.status(500).json({ error: 'Erreur serveur lors de la connexion' });
            }

            // ‚úÖ GESTION COMPTE SUPPRIM√â/INEXISTANT (404)
            if (results.rows.length === 0) {
                console.log(`‚ùå Compte introuvable (supprim√© ou inexistant): ${email}`);
                return res.status(404).json({ 
                    error: 'Compte introuvable. Veuillez contacter le SuperAdmin si vous pensez qu\'il s\'agit d\'une erreur.',
                    accountDeleted: true
                });
            }

            const user = results.rows[0];
            console.log(`‚úÖ Utilisateur trouv√©: ${user.email} (ID: ${user.id}, Role: ${user.role})`);

            // ‚úÖ GESTION COMPTE INACTIF (403)
            if (!user.is_active) {
                console.log(`‚ùå Compte inactif: ${email}`);
                return res.status(403).json({ 
                    error: 'Votre compte a √©t√© d√©sactiv√©. Contactez l\'administrateur.',
                    accountInactive: true
                });
            }

            try {
                // V√©rification du mot de passe
                if (!user.mot_de_passe) {
                    console.log('‚ùå Aucun mot de passe stock√© pour cet utilisateur');
                    return res.status(500).json({ error: 'Probl√®me de configuration du compte' });
                }

                const isPasswordValid = await bcrypt.compare(mot_de_passe, user.mot_de_passe);
                
                // ‚úÖ GESTION MOT DE PASSE INCORRECT (401)
                if (!isPasswordValid) {
                    console.log(`‚ùå Mot de passe incorrect pour: ${email}`);
                    return res.status(401).json({ 
                        error: 'Email ou mot de passe incorrect',
                        wrongPassword: true
                    });
                }

                console.log(`‚úÖ Mot de passe correct pour: ${email}`);

                // G√©n√©rer le token JWT
                const tokenPayload = {
                    id: user.id,
                    email: user.email,
                    role: user.role,
                    commission_id: user.commission_id,
                    service_id: user.service_id
                };

                const token = jwt.sign(tokenPayload, JWT_SECRET, { expiresIn: '7d' });

                // Mettre √† jour la derni√®re connexion (sans bloquer la r√©ponse)
                const updateLastLogin = 'UPDATE users SET last_login = NOW() WHERE id = $1';
                db.query(updateLastLogin, [user.id], (updateErr) => {
                    if (updateErr) {
                        console.error('‚ö†Ô∏è Erreur mise √† jour derni√®re connexion:', updateErr);
                    }
                });

                // Pr√©parer les donn√©es utilisateur (sans le mot de passe)
                const userData = {
                    id: user.id,
                    nom: user.nom,
                    prenom: user.prenom,
                    email: user.email,
                    telephone: user.telephone,
                    role: user.role,
                    commission_id: user.commission_id,
                    service_id: user.service_id,
                    email_verified: user.email_verified,
                    is_active: user.is_active
                };

                console.log(`‚úÖ Connexion r√©ussie pour: ${email} (${user.role})`);

                res.json({
                    success: true,
                    message: 'Connexion r√©ussie',
                    token: token,
                    user: userData
                });

            } catch (bcryptError) {
                console.error('‚ùå Erreur lors de la comparaison du mot de passe:', bcryptError);
                return res.status(500).json({ error: 'Erreur lors de la v√©rification du mot de passe' });
            }
        });

    } catch (error) {
        console.error('‚ùå Erreur g√©n√©rale connexion:', error);
        res.status(500).json({ error: 'Erreur serveur interne' });
    }
};

// ======================
// GET PROFILE
// ======================
export const getProfile = async (req, res) => {
    try {
        const userId = req.user.id;

        const query = 'SELECT id, email, nom, prenom, role, commission_id, service_id, telephone, email_verified, is_active FROM users WHERE id = $1';
        
        db.query(query, [userId], (err, result) => {
            if (err) {
                console.error('‚ùå Erreur getProfile:', err);
                return res.status(500).json({ error: 'Erreur serveur' });
            }

            if (result.rows.length === 0) {
                return res.status(404).json({ error: 'Utilisateur introuvable' });
            }

            res.json(result.rows[0]);
        });

    } catch (error) {
        console.error('‚ùå Erreur getProfile:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
};

// ======================
// UPDATE PROFILE
// ======================
export const updateProfile = async (req, res) => {
    try {
        const userId = req.user.id;
        const { nom, prenom, email, mot_de_passe } = req.body;

        // V√©rifier si l'utilisateur existe
        const checkQuery = 'SELECT * FROM users WHERE id = $1';
        
        db.query(checkQuery, [userId], async (err, checkResult) => {
            if (err) {
                console.error('‚ùå Erreur v√©rification utilisateur:', err);
                return res.status(500).json({ error: 'Erreur serveur' });
            }

            if (checkResult.rows.length === 0) {
                return res.status(404).json({ error: 'Utilisateur introuvable' });
            }

            // Si email change, v√©rifier qu'il n'est pas d√©j√† utilis√©
            if (email && email !== checkResult.rows[0].email) {
                const emailCheckQuery = 'SELECT id FROM users WHERE email = $1 AND id != $2';
                
                const emailCheckResult = await new Promise((resolve, reject) => {
                    db.query(emailCheckQuery, [email, userId], (emailErr, emailResult) => {
                        if (emailErr) reject(emailErr);
                        else resolve(emailResult);
                    });
                });
                
                if (emailCheckResult.rows.length > 0) {
                    return res.status(409).json({ error: 'Cet email est d√©j√† utilis√©' });
                }
            }

            let updateQuery;
            let values;

            if (mot_de_passe) {
                // Avec changement de mot de passe
                const hashedPassword = await bcrypt.hash(mot_de_passe, 12);
                updateQuery = `
                    UPDATE users 
                    SET nom = $1, prenom = $2, email = $3, mot_de_passe = $4, updated_at = NOW() 
                    WHERE id = $5 
                    RETURNING id, email, nom, prenom, role, commission_id, service_id, telephone
                `;
                values = [nom, prenom, email, hashedPassword, userId];
            } else {
                // Sans changement de mot de passe
                updateQuery = `
                    UPDATE users 
                    SET nom = $1, prenom = $2, email = $3, updated_at = NOW() 
                    WHERE id = $4 
                    RETURNING id, email, nom, prenom, role, commission_id, service_id, telephone
                `;
                values = [nom, prenom, email, userId];
            }

            db.query(updateQuery, values, (updateErr, result) => {
                if (updateErr) {
                    console.error('‚ùå Erreur updateProfile:', updateErr);
                    return res.status(500).json({ error: 'Erreur lors de la mise √† jour' });
                }

                console.log('‚úÖ Profil mis √† jour avec succ√®s');

                res.json({
                    message: 'Profil mis √† jour avec succ√®s',
                    user: result.rows[0]
                });
            });
        });

    } catch (error) {
        console.error('‚ùå Erreur updateProfile:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
};

// ======================
// FONCTIONS UTILITAIRES
// ======================

const generateValidationCode = () => {
    return Math.floor(100000 + Math.random() * 900000).toString();
};

const generateTemporaryPassword = () => {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let result = '';
    for (let i = 0; i < 8; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
};

// ======================
// MOT DE PASSE TEMPORAIRE
// ======================
export const sendTemporaryPassword = async (req, res) => {
    try {
        const { type, target } = req.body;
        console.log(`üì• Demande mot de passe temporaire - Type: ${type}, Target: ${target}`);

        if (!type || !target) {
            return res.status(400).json({ error: 'Type et cible requis' });
        }

        if (type === 'email') {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(target)) {
                return res.status(400).json({ error: 'Adresse email invalide' });
            }
        } else if (type === 'sms') {
            const phoneRegex = /^(\+229)?[0-9]{8,}$/;
            if (!phoneRegex.test(target.replace(/\s/g, ''))) {
                return res.status(400).json({ error: 'Num√©ro de t√©l√©phone invalide' });
            }
        } else {
            return res.status(400).json({ error: 'Type invalide. Utilisez "email" ou "sms"' });
        }

        const checkField = type === 'email' ? 'email' : 'telephone';
        const checkUser = `SELECT * FROM users WHERE ${checkField} = $1`;
        
        db.query(checkUser, [target], (err, results) => {
            if (err) {
                console.error('‚ùå Erreur v√©rification utilisateur pour r√©cup√©ration:', err);
                return res.status(500).json({ error: 'Erreur serveur' });
            }

            if (results.rows.length === 0) {
                return res.status(404).json({ error: 'Aucun compte trouv√© avec cette information' });
            }

            const temporaryPassword = generateTemporaryPassword();
            const expiry = Date.now() + 30 * 60 * 1000;

            temporaryPasswords.set(target, {
                password: temporaryPassword,
                expiry,
                used: false,
                userId: results.rows[0].id
            });

            console.log(`‚úÖ Mot de passe temporaire g√©n√©r√© pour ${target}`);

            res.json({
                success: true,
                message: 'Mot de passe temporaire envoy√©',
                ...(process.env.NODE_ENV === 'development' && { temporaryPassword })
            });
        });

    } catch (error) {
        console.error('‚ùå Erreur envoi mot de passe temporaire:', error);
        res.status(500).json({ error: 'Erreur serveur interne' });
    }
};

export const changeTemporaryPassword = async (req, res) => {
    try {
        const { temporaryPassword, newPassword } = req.body;
        console.log('üì• Demande changement mot de passe temporaire');

        if (!temporaryPassword || !newPassword) {
            return res.status(400).json({ error: 'Mot de passe temporaire et nouveau mot de passe requis' });
        }

        if (newPassword.length < 8) {
            return res.status(400).json({ error: 'Le nouveau mot de passe doit contenir au moins 8 caract√®res' });
        }

        if (temporaryPassword === newPassword) {
            return res.status(400).json({ error: 'Le nouveau mot de passe doit √™tre diff√©rent du mot de passe temporaire' });
        }

        let foundTarget = null;
        let foundData = null;

        for (const [target, data] of temporaryPasswords.entries()) {
            if (data.password === temporaryPassword && !data.used) {
                if (Date.now() <= data.expiry) {
                    foundTarget = target;
                    foundData = data;
                    break;
                }
            }
        }

        if (!foundTarget) {
            return res.status(400).json({ error: 'Mot de passe temporaire invalide, expir√© ou d√©j√† utilis√©' });
        }

        try {
            const hashedPassword = await bcrypt.hash(newPassword, 12);
            const updatePassword = 'UPDATE users SET mot_de_passe = $1, updated_at = NOW() WHERE id = $2';
            
            db.query(updatePassword, [hashedPassword, foundData.userId], (err, result) => {
                if (err) {
                    console.error('‚ùå Erreur mise √† jour mot de passe:', err);
                    return res.status(500).json({ error: 'Erreur lors de la mise √† jour du mot de passe' });
                }

                temporaryPasswords.delete(foundTarget);
                console.log(`‚úÖ Mot de passe chang√© avec succ√®s pour l'utilisateur ID: ${foundData.userId}`);

                res.json({
                    success: true,
                    message: 'Mot de passe chang√© avec succ√®s'
                });
            });

        } catch (hashError) {
            console.error('‚ùå Erreur hachage nouveau mot de passe:', hashError);
            return res.status(500).json({ error: 'Erreur lors du traitement du nouveau mot de passe' });
        }

    } catch (error) {
        console.error('‚ùå Erreur changement mot de passe temporaire:', error);
        res.status(500).json({ error: 'Erreur serveur interne' });
    }
};

// ======================
// CODES DE VALIDATION
// ======================
export const sendValidationCode = async (req, res) => {
    try {
        const { type, target } = req.body;
        console.log(`üì• Demande code validation - Type: ${type}, Target: ${target}`);

        if (!type || !target) {
            return res.status(400).json({ error: 'Type et cible requis' });
        }

        if (type === 'email') {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(target)) {
                return res.status(400).json({ error: 'Adresse email invalide' });
            }
        } else if (type === 'sms') {
            const phoneRegex = /^(\+229)?[0-9]{8,}$/;
            if (!phoneRegex.test(target.replace(/\s/g, ''))) {
                return res.status(400).json({ error: 'Num√©ro de t√©l√©phone invalide' });
            }
        } else {
            return res.status(400).json({ error: 'Type invalide. Utilisez "email" ou "sms"' });
        }

        const code = generateValidationCode();
        const token = crypto.randomBytes(32).toString('hex');
        const expiry = Date.now() + 10 * 60 * 1000;

        validationCodes.set(token, {
            code,
            target,
            type,
            expiry
        });

        console.log(`‚úÖ Code de validation g√©n√©r√© pour ${target} par ${type}`);

        res.json({
            success: true,
            message: 'Code de validation envoy√©',
            token,
            ...(process.env.NODE_ENV === 'development' && { code })
        });

    } catch (error) {
        console.error('‚ùå Erreur envoi code de validation:', error);
        res.status(500).json({ error: 'Erreur serveur interne' });
    }
};

export const validateCode = async (req, res) => {
    try {
        const { token, code } = req.body;
        console.log('üì• Validation code');

        if (!token || !code) {
            return res.status(400).json({ error: 'Token et code requis' });
        }

        const validationData = validationCodes.get(token);

        if (!validationData) {
            return res.status(400).json({ error: 'Token invalide ou expir√©' });
        }

        if (Date.now() > validationData.expiry) {
            validationCodes.delete(token);
            return res.status(400).json({ error: 'Code expir√©' });
        }

        if (validationData.code !== code) {
            return res.status(400).json({ error: 'Code incorrect' });
        }

        validationCodes.delete(token);
        console.log(`‚úÖ Code valid√© pour ${validationData.target}`);

        res.json({
            success: true,
            message: 'Code valid√© avec succ√®s'
        });

    } catch (error) {
        console.error('‚ùå Erreur validation code:', error);
        res.status(500).json({ error: 'Erreur serveur interne' });
    }
};

export const resendValidationCode = async (req, res) => {
    try {
        console.log('üì• Demande de renvoi de code de validation');
        return sendValidationCode(req, res);
    } catch (error) {
        console.error('‚ùå Erreur renvoi code:', error);
        res.status(500).json({ error: 'Erreur serveur interne' });
    }
};